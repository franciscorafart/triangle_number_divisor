// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?


console.log("num = "+triangleNum(500))

//Loop that goes through triangle numbers, counts divisors and returns the first traingle number that has more than limitDiv argument.
function triangleNum(limitDiv){

  //Get triangle numbers
  let num = 0
  let triangleTemp = 0
  let i = 1
  let found = false

  while (!found){
    //store triangle numbers
    triangleTemp += i++

    //Look for number of divisors in triangle number
    //Through observation only triangleNums divisible by 10 had higher number of divisorse
    //For efficiency, only evaluate these
    if(triangleTemp%10 == 0){
      let divisors = divisor(triangleTemp)

      //if its greater than the limit established, store the numeber and break the loop
      if(divisors.length>limitDiv){
        num = triangleTemp
        found = true
      }
    }
  }
  return num
}

//Function to find divisors of each number
function divisor(x){
  let res = [1,x] //For efficiency, we include 1 and x. They will always be in the list.
  //For efficiency, with the exception of x itself, only numbers equal or smaller thatn x/2 can divide x
  for(let i = Math.floor(x/2); i>1; i--){
    if(x%i == 0){
      res.unshift(i)
    }
  }
  return res
}
